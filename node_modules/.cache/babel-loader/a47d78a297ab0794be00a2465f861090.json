{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/ReceiptView/Receipt.jsx\";\nimport React, { Component } from 'react';\nimport { updateReceiptArr } from '../firebase/firebase.utils';\nimport axios from 'axios';\nimport ReceiptTable from './ReceiptTable';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\nimport Navbar from '../navbar/Navbar';\nimport Topbar from '../navbar/Topbar';\nimport ToastMessage from '../Toast/toastMessage';\nimport './receipt.css'; //API KEY FOR OCR SCAN\n\nlet MY_URL_KEY = '31bb9650994211eab7efc1191d38e165';\nexport default class Receipt extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageUrl: undefined,\n      saved: false\n    };\n\n    this.getReceiptData = async (urlImage, currentTrip) => {\n      const {\n        url,\n        id\n      } = urlImage;\n      let file = {\n        url: url,\n        headers: {\n          'x-custom-key': 'string'\n        }\n      };\n      axios.post('https://api.taggun.io/api/receipt/v1/simple/url', file, {\n        headers: {\n          apikey: MY_URL_KEY\n        }\n      }).then(function (response) {\n        //  IF SUCCESSFULL SAVE THE DATA TO FIREBASE\n        updateReceiptArr(id, url, response.data.totalAmount.data, currentTrip);\n      }).catch(function (error) {\n        console.log(error);\n      }); //CLEAN STATE FOR ANOTHER IMAGE TO BE UPLOADED IF NEEDED\n\n      this.setState({\n        imageUrl: undefined,\n        saved: true\n      });\n    };\n\n    this.uploadAndScan = async (url, currentTrip) => {\n      await this.getReceiptData(url, currentTrip);\n    };\n\n    this.handleFileUpload = e => {\n      //CLOUDINARY CONFIG VALUES\n      const cloudName = 'dsxn0sfql';\n      const preset = 'w8mpx9l6';\n      let imgFile = e.target.files[0];\n      var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n      var xhr = new XMLHttpRequest();\n      var fd = new FormData();\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      xhr.onreadystatechange = e => {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n          // File uploaded successfully\n          var response = JSON.parse(xhr.responseText);\n          var url = response.secure_url;\n          var id = response.asset_id; // UPDATE STATE WITH IMAGE URL AND ID\n\n          this.setState({\n            imageUrl: {\n              url: url,\n              id: id\n            },\n            saved: false\n          });\n        }\n      }; //POST REQUEST FIELDS\n\n\n      fd.append('upload_preset', preset);\n      fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n      fd.append('file', imgFile);\n      xhr.send(fd);\n    };\n  }\n\n  render() {\n    let currentTrip = '';\n    console.log(this.props.currentUser);\n\n    if (this.props.currentUser.query) {\n      console.log(this.props.currentUser);\n      currentTrip = this.props.currentUser.query;\n    } else {\n      currentTrip = this.props.currentUser.currentTrip;\n    }\n\n    let onUp = false;\n    let onSaved = this.state.saved;\n    this.state.imageUrl === undefined ? onUp = false : onUp = true;\n    onSaved ? onSaved = true : onSaved = false;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReceiptTable, {\n      currentUser: this.props.currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      className: \"receiptBtn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\" // className={classes.button}\n      ,\n      startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 24\n        }\n      }),\n      onClick: () => this.uploadAndScan(this.state.imageUrl, currentTrip),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"input\", {\n      accept: \"image/*\",\n      className: \"uploadFile groupBtn\",\n      id: \"contained-button-file\",\n      multiple: true,\n      type: \"file\",\n      onChange: e => this.handleFileUpload(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"contained-button-file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"default\",\n      size: \"small\",\n      component: \"span\",\n      className: \"groupBtn\",\n      startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 26\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \"Upload\"))), onUp ? /*#__PURE__*/React.createElement(ToastMessage, {\n      message: 'Success, ready to save!',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }) : '', onSaved ? /*#__PURE__*/React.createElement(ToastMessage, {\n      message: 'Receipt saved!',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 20\n      }\n    }) : '');\n  }\n\n}","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/ReceiptView/Receipt.jsx"],"names":["React","Component","updateReceiptArr","axios","ReceiptTable","Button","CloudUploadIcon","SaveIcon","Grid","Navbar","Topbar","ToastMessage","MY_URL_KEY","Receipt","state","imageUrl","undefined","saved","getReceiptData","urlImage","currentTrip","url","id","file","headers","post","apikey","then","response","data","totalAmount","catch","error","console","log","setState","uploadAndScan","handleFileUpload","e","cloudName","preset","imgFile","target","files","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","secure_url","asset_id","append","send","render","props","currentUser","query","onUp","onSaved"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { updateReceiptArr } from '../firebase/firebase.utils';\nimport axios from 'axios';\nimport ReceiptTable from './ReceiptTable';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\nimport Navbar from '../navbar/Navbar';\nimport Topbar from '../navbar/Topbar';\nimport ToastMessage from '../Toast/toastMessage';\nimport './receipt.css';\n\n//API KEY FOR OCR SCAN\nlet MY_URL_KEY = '31bb9650994211eab7efc1191d38e165';\n\nexport default class Receipt extends Component {\n  state = {\n    imageUrl: undefined,\n    saved: false,\n  };\n\n  //IN THIS FUNCTION WE MAKE A CALL TO THE ACR SCAN API AND WE PASS THE DATA WE RECIEVE TO\n  //FIREBASE FOR STORAGE\n  getReceiptData = async (urlImage, currentTrip) => {\n    const { url, id } = urlImage\n    let file = {\n      url: url,\n      headers: {\n        'x-custom-key': 'string',\n      },\n    };\n    \n    axios\n      .post('https://api.taggun.io/api/receipt/v1/simple/url', file, {\n        headers: {\n          apikey: MY_URL_KEY,\n        },\n      })\n      .then(function (response) {\n        //  IF SUCCESSFULL SAVE THE DATA TO FIREBASE\n        updateReceiptArr(id, url, response.data.totalAmount.data, currentTrip);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n    //CLEAN STATE FOR ANOTHER IMAGE TO BE UPLOADED IF NEEDED\n\n    this.setState({\n      imageUrl: undefined,\n      saved:true,\n    });\n  };\n\n  //TRIGGER THE OCR SCAN FUNCTION\n  uploadAndScan = async (url, currentTrip) => {\n    await this.getReceiptData(url, currentTrip);\n  };\n\n  //UPLOAD FILE TO CLOUDINARY AND GET THE IMG URL AND ID\n  handleFileUpload = (e) => {\n    //CLOUDINARY CONFIG VALUES\n    const cloudName = 'dsxn0sfql';\n    const preset = 'w8mpx9l6';\n    let imgFile = e.target.files[0];\n\n    var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n    xhr.onreadystatechange = (e) => {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        // File uploaded successfully\n        var response = JSON.parse(xhr.responseText);\n\n        var url = response.secure_url;\n        var id = response.asset_id;\n\n        // UPDATE STATE WITH IMAGE URL AND ID\n        this.setState({\n          imageUrl: {\n            url: url,\n            id: id,\n          },\n          saved:false,     \n        });\n      }\n    };\n    //POST REQUEST FIELDS\n    fd.append('upload_preset', preset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', imgFile);\n    xhr.send(fd);\n  };\n\n  render() {\n    let currentTrip = ''\n    console.log(this.props.currentUser)\n    if (this.props.currentUser.query){\n      console.log(this.props.currentUser)\n      currentTrip = this.props.currentUser.query\n    }else{\n      currentTrip = this.props.currentUser.currentTrip\n    }\n    let onUp = false;\n    let onSaved = this.state.saved;\n    (this.state.imageUrl===undefined) ? onUp = false : onUp=true;\n    (onSaved) ? onSaved = true : onSaved=false;\n\n    return (\n      <div>\n        <div className=\"table\">\n          <ReceiptTable currentUser={this.props.currentUser}/>\n        </div>\n\n        <Grid container justify=\"center\" alignItems=\"center\" className='receiptBtn'>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            // className={classes.button}\n            startIcon={<SaveIcon />}\n            onClick={() => this.uploadAndScan(this.state.imageUrl, currentTrip)}\n          >\n            Save\n          </Button>\n          <input\n            accept=\"image/*\"\n            className=\"uploadFile groupBtn\"\n            id=\"contained-button-file\"\n            multiple\n            type=\"file\"\n            onChange={(e) => this.handleFileUpload(e)}\n          />\n          <label htmlFor=\"contained-button-file\">\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n              size=\"small\"\n              component=\"span\"\n              className=\"groupBtn\"\n              startIcon={<CloudUploadIcon />}\n            >\n              Upload\n            </Button>\n          </label>\n        </Grid>\n       {\n         onUp ? <ToastMessage message={'Success, ready to save!'} /> : ''\n       }\n       {\n         onSaved ? <ToastMessage message={'Receipt saved!'} /> : ''\n       }\n        \n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}