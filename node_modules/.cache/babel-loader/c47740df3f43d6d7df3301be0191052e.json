{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\n\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = [];\n    const isActive = true;\n    const users = [email];\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      }); //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\n      await updateTripStatus(user.id);\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n}; //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\nconst updateTripStatus = async userID => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const endTripStatus = async userID => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: false\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n}; // UPDATE QUOTE FOR PROFILE\n\nexport const updateQuote = async (userID, quote) => {\n  console.log('running');\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      quote: quote\n    });\n  } catch (error) {\n    console.log('Error adding quote', error);\n  }\n};\nexport const userList = async () => {\n  let userArr = [];\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => userArr[i] = {\n    id: doc.id,\n    ...doc.data()\n  });\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let doc = await firestore.collection('images').doc(docID);\n  let observer = await doc.onSnapshot(async docSnapshot => {\n    let getDoc = await doc.get().then(async doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else if (data.length !== doc.data().receiptImg.length) {\n        upF();\n      }\n    });\n  }, err => {\n    console.log(`Encountered error: ${err}`);\n  });\n};\n\nexport const receiptListArr = async updateFunc => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      receiptArr = doc.data().receiptImg;\n      sentinel(receiptArr, updateFunc);\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return receiptArr;\n};\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const updateTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const deleteTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item)\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider); // console.log(auth.signInWithPopup(provider))\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/hugoii/Desktop/ironhack/projects/Fasces/src/Components/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","photoURL","createdAt","Date","trackStock","activeTrip","set","error","console","log","message","createNewTrip","user","tripName","id","tripRef","tripImages","tripReceipts","isActive","users","updateTripStatus","userID","collection","update","endTripStatus","updateQuote","quote","userList","userArr","docs","map","i","data","length","sentinel","upF","docID","observer","onSnapshot","docSnapshot","getDoc","then","receiptImg","err","receiptListArr","updateFunc","receiptArr","arrRef","catch","updateReceiptArr","imgURL","imgAmount","date","toDateString","item","url","amount","FieldValue","arrayUnion","saveReceipt","imgUrl","updateTracking","stockArr","deleteTracking","arrayRemove","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN',\n};\n\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email, photoURL } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n  return userRef;\n};\n\n\n//CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const { email } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = []\n    const isActive = true;\n    const users = [email]\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      });\n      //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n      await updateTripStatus(user.id)\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n\n}\n\n\n//SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\nconst updateTripStatus = async (userID) => {\n\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true,\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n\n}\n\nexport const endTripStatus = async (userID) => {\n\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: false,\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n\n}\n\n\n// UPDATE QUOTE FOR PROFILE\nexport const updateQuote = async (userID, quote) => {\nconsole.log('running')\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      quote: quote,\n    });\n  } catch (error) {\n    console.log('Error adding quote', error);\n  }\n\n}\n\n\nexport const userList = async () => {\n  let userArr = [];\n\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n\n  let doc = await firestore.collection('images').doc(docID);\n\n  let observer = await doc.onSnapshot(\n    async (docSnapshot) => {\n      let getDoc = await doc.get().then(async (doc) => {\n        if (!doc.exists) {\n          console.log('No such document!');\n        } else if (data.length !== doc.data().receiptImg.length) {\n          upF();\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const receiptListArr = async (updateFunc) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef\n    .get()\n    .then((doc) => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        receiptArr = doc.data().receiptImg;\n\n        sentinel(receiptArr, updateFunc);\n      }\n    })\n    .catch((err) => {\n      console.log('Error getting document', err);\n    });\n\n  return receiptArr;\n};\n\n\n\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount,\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount,\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const updateTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const deleteTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item),\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n  // console.log(auth.signInWithPopup(provider))\n};\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}