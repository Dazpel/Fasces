{"ast":null,"code":"import axios from 'axios';\nlet baseURL;\nprocess.env.NODE_ENV === 'production' //? (baseURL = 'here should be your production endpoint')\n? baseURL = window.location.origin : baseURL = 'http://localhost:5000';\nconst service = axios.create({\n  withCredentials: true,\n  baseURL\n});\nconst actions = {\n  isLoggedIn: async () => {\n    return await service.get('/is-logged-in');\n  },\n  signUp: async user => {\n    return await service.post('/signup', user);\n  },\n  logIn: async user => {\n    return await service.post('/login', user);\n  },\n  check: async () => {\n    return await service.get('/check');\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/RouteContainer/axiosCalls.js"],"names":["axios","baseURL","process","env","NODE_ENV","window","location","origin","service","create","withCredentials","actions","isLoggedIn","get","signUp","user","post","logIn","check"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,OAAJ;AAEAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,CACE;AADF,EAEKH,OAAO,GAAGI,MAAM,CAACC,QAAP,CAAgBC,MAF/B,GAGKN,OAAO,GAAG,uBAHf;AAKA,MAAMO,OAAO,GAAGR,KAAK,CAACS,MAAN,CAAa;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBT,EAAAA;AAAzB,CAAb,CAAhB;AAEA,MAAMU,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,YAAY;AACtB,WAAO,MAAMJ,OAAO,CAACK,GAAR,CAAY,eAAZ,CAAb;AACD,GAHa;AAIdC,EAAAA,MAAM,EAAE,MAAOC,IAAP,IAAgB;AACtB,WAAO,MAAMP,OAAO,CAACQ,IAAR,CAAa,SAAb,EAAwBD,IAAxB,CAAb;AACD,GANa;AAOdE,EAAAA,KAAK,EAAE,MAAOF,IAAP,IAAgB;AACrB,WAAO,MAAMP,OAAO,CAACQ,IAAR,CAAa,QAAb,EAAuBD,IAAvB,CAAb;AACD,GATa;AAUdG,EAAAA,KAAK,EAAE,YAAY;AACjB,WAAO,MAAMV,OAAO,CAACK,GAAR,CAAY,QAAZ,CAAb;AACD;AAZa,CAAhB;AAeA,eAAeF,OAAf","sourcesContent":["import axios from 'axios';\nlet baseURL;\n\nprocess.env.NODE_ENV === 'production'\n  //? (baseURL = 'here should be your production endpoint')\n  ? (baseURL = window.location.origin)\n  : (baseURL = 'http://localhost:5000');\n\nconst service = axios.create({ withCredentials: true, baseURL });\n\nconst actions = {\n  isLoggedIn: async () => {\n    return await service.get('/is-logged-in')\n  },\n  signUp: async (user) => {\n    return await service.post('/signup', user)\n  },\n  logIn: async (user) => {\n    return await service.post('/login', user)\n  },\n  check: async () => {\n    return await service.get('/check')\n  }\n};\n\nexport default actions;"]},"metadata":{},"sourceType":"module"}