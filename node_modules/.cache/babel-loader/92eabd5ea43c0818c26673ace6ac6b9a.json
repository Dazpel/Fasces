{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\n\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = [];\n    const isActive = true;\n    const users = [email];\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      }); //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\n      await updateTripStatus(user.id, id);\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n}; //FIND FRIENDS EMAIL TO JOIN THE GROUP\n\nexport const findMyFriend = async email => {\n  let users = await userList();\n  let tripExist = false;\n  users.map(el => {\n    if (el.email === email && el.activeTrip === true) {\n      return tripExist = el.currentTrip;\n    }\n  });\n  return tripExist;\n};\nexport const endTrip = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  let tripRef = await firestore.collection('trips').doc(tripID).get();\n  let tripData = tripRef.data(); // try {\n  //   user.update({\n  //     activeTrip: false,\n  //     currentTrip: '',\n  //   });\n  // } catch (error) {\n  //   console.log('Error ending trip', error);\n  // }\n\n  console.log(tripData);\n}; //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\nexport const updateTripStatus = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID\n    });\n  } catch (error) {\n    console.log('Error creating trip', error);\n  }\n};\nexport const retrieveImages = async user => {\n  const {\n    currentTrip\n  } = user;\n  let tripImages = [];\n\n  try {\n    let ref = await firestore.collection('trips').doc(currentTrip).get();\n    let data = await ref.data();\n    tripImages = data.tripImages;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return tripImages.reverse();\n};\nexport const userList = async () => {\n  let userArr = [];\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => userArr[i] = {\n    id: doc.id,\n    ...doc.data()\n  });\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\nexport const updateImageArr = async (url, tripID) => {\n  const docID = tripID;\n  let imageArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString(); // let item = {\n  //   url: url,\n  //   id: id,\n  //   createdAt: createdAt,\n  //   amount: imgAmount,\n  // };\n\n  try {\n    imageArr.update({\n      tripImages: firebase.firestore.FieldValue.arrayUnion(url)\n    });\n  } catch (error) {\n    console.log('Error adding image', error);\n  }\n};\n\nconst sentinel = async (data, upF, currentTrip) => {\n  const docID = currentTrip;\n  let doc = await firestore.collection('trips').doc(docID);\n  let observer = await doc.onSnapshot(async docSnapshot => {\n    let getDoc = await doc.get().then(async doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else if (data.length !== doc.data().tripReceipts.length) {\n        upF();\n      }\n    });\n  }, err => {\n    console.log(`Encountered error: ${err}`);\n  });\n};\n\nexport const receiptListArr = async (user, updateFunc) => {\n  const {\n    currentTrip\n  } = user;\n  var receiptArr = [];\n  let arrRef = await firestore.collection('trips').doc(currentTrip);\n  let getDoc = await arrRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      receiptArr = doc.data().tripReceipts;\n      console.log(receiptArr);\n      sentinel(receiptArr, updateFunc, currentTrip);\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return receiptArr;\n};\nexport const updateReceiptArr = async (id, imgURL, imgAmount, tripID) => {\n  const docID = tripID;\n  let receiptArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount\n  };\n\n  try {\n    receiptArr.update({\n      tripReceipts: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const updateTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const deleteTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item)\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider); // console.log(auth.signInWithPopup(provider))\n};\nexport default firebase;","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","photoURL","createdAt","Date","trackStock","activeTrip","set","error","console","log","message","createNewTrip","user","tripName","id","tripRef","tripImages","tripReceipts","isActive","users","updateTripStatus","findMyFriend","userList","tripExist","map","el","currentTrip","endTrip","userID","tripID","collection","tripData","data","update","trips","FieldValue","arrayUnion","retrieveImages","ref","err","reverse","userArr","docs","i","length","updateImageArr","url","docID","imageArr","date","toDateString","sentinel","upF","observer","onSnapshot","docSnapshot","getDoc","then","receiptListArr","updateFunc","receiptArr","arrRef","catch","updateReceiptArr","imgURL","imgAmount","item","amount","saveReceipt","imgUrl","updateTracking","stockArr","deleteTracking","arrayRemove","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN',\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email, photoURL } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n  return userRef;\n};\n\n//CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const { email } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = [];\n    const isActive = true;\n    const users = [email];\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users,\n      });\n      //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n      await updateTripStatus(user.id, id);\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n};\n\n//FIND FRIENDS EMAIL TO JOIN THE GROUP\nexport const findMyFriend = async (email) => {\n  let users = await userList()\n  let tripExist = false\n\n  users.map(el => {\n    if(el.email === email && el.activeTrip === true){\n      return tripExist = el.currentTrip\n    }\n  })\n  \n  return tripExist\n\n};\n\nexport const endTrip = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  let tripRef = await firestore.collection('trips').doc(tripID).get();\n  let tripData = tripRef.data()\n\n  // try {\n  //   user.update({\n  //     activeTrip: false,\n  //     currentTrip: '',\n  //   });\n  // } catch (error) {\n  //   console.log('Error ending trip', error);\n  // }\n\n  console.log(tripData)\n}\n\n\n//SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\nexport const updateTripStatus = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID,\n    });\n  } catch (error) {\n    console.log('Error creating trip', error);\n  }\n};\n\nexport const retrieveImages = async (user) => {\n  const { currentTrip } = user;\n  let tripImages = [];\n\n  try {\n    let ref = await firestore.collection('trips').doc(currentTrip).get();\n    let data = await ref.data();\n    tripImages = data.tripImages;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return tripImages.reverse();\n};\n\nexport const userList = async () => {\n  let userArr = [];\n\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nexport const updateImageArr = async (url, tripID) => {\n\n  const docID = tripID;\n  let imageArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  // let item = {\n  //   url: url,\n  //   id: id,\n  //   createdAt: createdAt,\n  //   amount: imgAmount,\n  // };\n\n  try {\n    imageArr.update({\n      tripImages: firebase.firestore.FieldValue.arrayUnion(url),\n    });\n  } catch (error) {\n    console.log('Error adding image', error);\n  }\n\n}\n\n\nconst sentinel = async (data, upF, currentTrip) => {\n  const docID = currentTrip;\n\n  let doc = await firestore.collection('trips').doc(docID);\n\n  let observer = await doc.onSnapshot(\n    async (docSnapshot) => {\n      let getDoc = await doc.get().then(async (doc) => {\n        if (!doc.exists) {\n          console.log('No such document!');\n        } else if (data.length !== doc.data().tripReceipts.length) {\n          upF();\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const receiptListArr = async (user, updateFunc) => {\n  const { currentTrip } = user;\n  var receiptArr = [];\n  let arrRef = await firestore.collection('trips').doc(currentTrip);\n  let getDoc = await arrRef\n    .get()\n    .then((doc) => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        receiptArr = doc.data().tripReceipts;\n        console.log(receiptArr)\n        sentinel(receiptArr, updateFunc, currentTrip);\n      }\n    })\n    .catch((err) => {\n      console.log('Error getting document', err);\n    });\n\n  return receiptArr;\n};\n\nexport const updateReceiptArr = async (id, imgURL, imgAmount, tripID) => {\n  const docID = tripID;\n  let receiptArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount,\n  };\n\n  try {\n    receiptArr.update({\n      tripReceipts: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount,\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const updateTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const deleteTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item),\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n  // console.log(auth.signInWithPopup(provider))\n};\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}