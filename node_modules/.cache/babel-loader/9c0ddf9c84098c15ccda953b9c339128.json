{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/ReceiptView/Receipt.jsx\";\nimport React, { Component } from 'react';\nimport { updateReceiptArr } from '../firebase/firebase.utils';\nimport axios from 'axios';\nimport ReceiptTable from './ReceiptTable';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save'; //API KEY FOR OCR SCAN\n\nlet MY_URL_KEY = '31bb9650994211eab7efc1191d38e165';\nexport default class Receipt extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageUrl: ''\n    };\n\n    this.getReceiptData = async ({\n      url,\n      id\n    }) => {\n      let file = {\n        url: url,\n        headers: {\n          'x-custom-key': 'string'\n        }\n      };\n      axios.post('https://api.taggun.io/api/receipt/v1/simple/url', file, {\n        headers: {\n          apikey: MY_URL_KEY\n        }\n      }).then(function (response) {\n        //  IF SUCCESSFULL SAVE THE DATA TO FIREBASE\n        updateReceiptArr(id, url, response.data.totalAmount.data);\n      }).catch(function (error) {\n        console.log(error);\n      }); //CLEAN STATE FOR ANOTHER IMAGE TO BE UPLOADED IF NEEDED\n\n      this.setState({\n        imageUrl: ''\n      });\n    };\n\n    this.uploadAndScan = async url => {\n      await this.getReceiptData(url);\n    };\n\n    this.handleFileUpload = e => {\n      //CLOUDINARY CONFIG VALUES\n      const cloudName = 'dsxn0sfql';\n      const preset = 'w8mpx9l6';\n      let imgFile = e.target.files[0];\n      var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n      var xhr = new XMLHttpRequest();\n      var fd = new FormData();\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      xhr.onreadystatechange = e => {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n          // File uploaded successfully\n          var response = JSON.parse(xhr.responseText);\n          var url = response.secure_url;\n          var id = response.asset_id; // UPDATE STATE WITH IMAGE URL AND ID\n\n          this.setState({\n            imageUrl: {\n              url: url,\n              id: id\n            }\n          });\n        }\n      }; //POST REQUEST FIELDS\n\n\n      fd.append('upload_preset', preset);\n      fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n      fd.append('file', imgFile);\n      xhr.send(fd);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReceiptTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.uploadAndScan(this.state.imageUrl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"Upload\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: e => this.handleFileUpload(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\" // className={classes.button}\n      ,\n      startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 20\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"input\", {\n      accept: \"image/*\" // className={classes.input}\n      ,\n      id: \"contained-button-file\",\n      multiple: true,\n      type: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"contained-button-file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"default\",\n      size: \"small\",\n      component: \"span\" // className={classes.button}\n      ,\n      startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 20\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, \"Upload\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/ReceiptView/Receipt.jsx"],"names":["React","Component","updateReceiptArr","axios","ReceiptTable","Button","CloudUploadIcon","SaveIcon","MY_URL_KEY","Receipt","state","imageUrl","getReceiptData","url","id","file","headers","post","apikey","then","response","data","totalAmount","catch","error","console","log","setState","uploadAndScan","handleFileUpload","e","cloudName","preset","imgFile","target","files","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","secure_url","asset_id","append","send","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  updateReceiptArr,\n} from '../firebase/firebase.utils';\nimport axios from 'axios';\nimport ReceiptTable from './ReceiptTable';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\n\n//API KEY FOR OCR SCAN\nlet MY_URL_KEY = '31bb9650994211eab7efc1191d38e165';\n\nexport default class Receipt extends Component {\n  state = {\n    imageUrl: '',\n    \n  };\n\n  //IN THIS FUNCTION WE MAKE A CALL TO THE ACR SCAN API AND WE PASS THE DATA WE RECIEVE TO\n  //FIREBASE FOR STORAGE\n  getReceiptData = async ({ url, id }) => {\n    let file = {\n      url: url,\n      headers: {\n        'x-custom-key': 'string',\n      },\n    };\n\n    axios\n      .post('https://api.taggun.io/api/receipt/v1/simple/url', file, {\n        headers: {\n          apikey: MY_URL_KEY,\n        },\n      })\n      .then(function (response) {\n        //  IF SUCCESSFULL SAVE THE DATA TO FIREBASE\n        updateReceiptArr(id, url, response.data.totalAmount.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n    //CLEAN STATE FOR ANOTHER IMAGE TO BE UPLOADED IF NEEDED\n\n    this.setState({\n      imageUrl: '',\n    });\n  };\n\n  //TRIGGER THE OCR SCAN FUNCTION\n  uploadAndScan = async (url) => {\n    await this.getReceiptData(url);\n  };\n\n  //UPLOAD FILE TO CLOUDINARY AND GET THE IMG URL AND ID\n  handleFileUpload = (e) => {\n    //CLOUDINARY CONFIG VALUES\n    const cloudName = 'dsxn0sfql';\n    const preset = 'w8mpx9l6';\n    let imgFile = e.target.files[0];\n\n    var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n    xhr.onreadystatechange = (e) => {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        // File uploaded successfully\n        var response = JSON.parse(xhr.responseText);\n\n        var url = response.secure_url;\n        var id = response.asset_id;\n        // UPDATE STATE WITH IMAGE URL AND ID\n        this.setState({\n          imageUrl: {\n            url: url,\n            id: id,\n          },\n        });\n      }\n    };\n    //POST REQUEST FIELDS\n    fd.append('upload_preset', preset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', imgFile);\n    xhr.send(fd);\n  };\n\n  render() {\n    return (\n      <div>\n        <ReceiptTable />\n\n        <button onClick={() => this.uploadAndScan(this.state.imageUrl)}>\n          Upload\n        </button>\n        <input type=\"file\" onChange={(e) => this.handleFileUpload(e)} />\n        <div>\n\n        <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        // className={classes.button}\n        startIcon={<SaveIcon />}\n      >\n        Save\n      </Button>\n      <input\n        accept=\"image/*\"\n        // className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n      />\n      <label htmlFor=\"contained-button-file\">\n      <Button\n        variant=\"contained\"\n        color=\"default\"\n        size=\"small\"\n        component=\"span\"\n        // className={classes.button}\n        startIcon={<CloudUploadIcon />}\n      >\n        Upload\n      </Button>\n      </label>\n       \n      \n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}