{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\n\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = [];\n    const isActive = true;\n    const users = [email];\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      }); //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\n      await updateTripStatus(user.id, id);\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n}; //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\nconst updateTripStatus = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const retrieveImages = async (user, state) => {\n  const {\n    currentTrip\n  } = user;\n  let tripData = []; // const trip = await firestore.collection('trips').doc(currentTrip);\n  // return tripData = await trip.onSnapshot(async(snapShot) => {\n  //   let data = await snapShot.data()\n  //   console.log(data.tripImages)\n  //   return data.tripImages\n  // });\n\n  let trip = await firestore.collection('trips').doc(currentTrip);\n  let tripDoc = await trip.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      state = doc.data().tripImages; // sentinel(receiptArr, updateFunc);\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n};\nexport const userList = async () => {\n  let userArr = [];\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => userArr[i] = {\n    id: doc.id,\n    ...doc.data()\n  });\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let doc = await firestore.collection('images').doc(docID);\n  let observer = await doc.onSnapshot(async docSnapshot => {\n    let getDoc = await doc.get().then(async doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else if (data.length !== doc.data().receiptImg.length) {\n        upF();\n      }\n    });\n  }, err => {\n    console.log(`Encountered error: ${err}`);\n  });\n};\n\nexport const receiptListArr = async updateFunc => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      receiptArr = doc.data().receiptImg;\n      sentinel(receiptArr, updateFunc);\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return receiptArr;\n};\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const updateTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const deleteTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item)\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider); // console.log(auth.signInWithPopup(provider))\n};\nexport default firebase;","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","photoURL","createdAt","Date","trackStock","activeTrip","set","error","console","log","message","createNewTrip","user","tripName","id","tripRef","tripImages","tripReceipts","isActive","users","updateTripStatus","userID","tripID","collection","update","trips","FieldValue","arrayUnion","currentTrip","retrieveImages","state","tripData","trip","tripDoc","then","data","catch","err","userList","userArr","docs","map","i","length","sentinel","upF","docID","observer","onSnapshot","docSnapshot","getDoc","receiptImg","receiptListArr","updateFunc","receiptArr","arrRef","updateReceiptArr","imgURL","imgAmount","date","toDateString","item","url","amount","saveReceipt","imgUrl","updateTracking","stockArr","deleteTracking","arrayRemove","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN',\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email, photoURL } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n  return userRef;\n};\n\n\n//CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const { email } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = []\n    const isActive = true;\n    const users = [email]\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      });\n      //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n      await updateTripStatus(user.id, id)\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n\n}\n\n\n//SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\nconst updateTripStatus = async (userID, tripID) => {\n\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID, \n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n\n}\n\nexport const retrieveImages = async (user, state) => {\n  const {currentTrip} = user;\n  let tripData = []\n  // const trip = await firestore.collection('trips').doc(currentTrip);\n  \n\n  // return tripData = await trip.onSnapshot(async(snapShot) => {\n  //   let data = await snapShot.data()\n  //   console.log(data.tripImages)\n  //   return data.tripImages\n    \n  // });\n\n  let trip = await firestore.collection('trips').doc(currentTrip);\n  let tripDoc = await trip\n    .get()\n    .then((doc) => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        state = doc.data().tripImages;\n\n        // sentinel(receiptArr, updateFunc);\n      }\n    })\n    .catch((err) => {\n      console.log('Error getting document', err);\n    });\n\n \n\n  \n\n\n}\n\nexport const userList = async () => {\n  let userArr = [];\n\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n\n  let doc = await firestore.collection('images').doc(docID);\n\n  let observer = await doc.onSnapshot(\n    async (docSnapshot) => {\n      let getDoc = await doc.get().then(async (doc) => {\n        if (!doc.exists) {\n          console.log('No such document!');\n        } else if (data.length !== doc.data().receiptImg.length) {\n          upF();\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const receiptListArr = async (updateFunc) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef\n    .get()\n    .then((doc) => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        receiptArr = doc.data().receiptImg;\n\n        sentinel(receiptArr, updateFunc);\n      }\n    })\n    .catch((err) => {\n      console.log('Error getting document', err);\n    });\n\n  return receiptArr;\n};\n\n\n\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount,\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount,\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const updateTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const deleteTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item),\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n  // console.log(auth.signInWithPopup(provider))\n};\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}