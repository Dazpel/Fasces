{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\n\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = [];\n    const isActive = true;\n    const users = [email];\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      }); //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\n      await updateTripStatus(user.id);\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n};\nexport const updateExpenses = async (userID, x) => {\n  let user = await firestore.collection('users').doc(userID);\n  let userData = await firestore.collection('users').doc(userID).get();\n  let expense = userData.data().expenses;\n  let total = expense + x;\n\n  try {\n    user.update({\n      expenses: total\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const endTripStatus = async userID => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: false\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n}; // UPDATE QUOTE FOR PROFILE\n\nexport const updateQuote = async (userID, quote) => {\n  console.log('running');\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      quote: quote\n    });\n  } catch (error) {\n    console.log('Error adding quote', error);\n  }\n};\nexport const userList = async () => {\n  let userArr = [];\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => userArr[i] = {\n    id: doc.id,\n    ...doc.data()\n  });\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\nexport const balance = async tripId => {\n  let trip = await firestore.collection('trips').doc(tripId).get();\n  return trip.balance;\n};\nexport const tripList = async () => {\n  let userArr = [];\n  let users = await firestore.collection('trips').get(); // users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n\n  return users.docs; // if (userArr.length > 0) {\n  //   console.log(userArr);\n  //   return userArr;\n  // }\n};\nexport const endTrip = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  let tripRef = await firestore.collection('trips').doc(tripID).get();\n  let tripData = tripRef.data();\n  let users = tripData.users;\n\n  try {\n    user.update({\n      activeTrip: false,\n      currentTrip: ''\n    });\n  } catch (error) {\n    console.log('Error ending trip', error);\n  }\n\n  try {\n    let emails = [];\n    users.map(async user => {\n      emails.push(user.email);\n    });\n    return emails;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const updateImageArr = async (url, tripID) => {\n  const docID = tripID;\n  let imageArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString(); // let item = {\n  //   url: url,\n  //   id: id,\n  //   createdAt: createdAt,\n  //   amount: imgAmount,\n  // };\n\n  try {\n    imageArr.update({\n      tripImages: firebase.firestore.FieldValue.arrayUnion(url)\n    });\n  } catch (error) {\n    console.log('Error adding image', error);\n  }\n}; //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n\nexport const updateTripStatus = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID\n    });\n  } catch (error) {\n    console.log('Error creating trip', error);\n  }\n};\nexport const retrieveImages = async user => {\n  const {\n    currentTrip\n  } = user;\n  let tripImages = [];\n\n  try {\n    let ref = await firestore.collection('trips').doc(currentTrip).get();\n    let data = await ref.data();\n    tripImages = data.tripImages;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return tripImages.reverse();\n};\nexport const findMyFriend = async email => {\n  let users = await userList();\n  let tripExist = false;\n  users.map(el => {\n    if (el.email === email && el.activeTrip === true) {\n      return tripExist = el.currentTrip;\n    }\n  });\n  return tripExist;\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let doc = await firestore.collection('images').doc(docID);\n  let observer = await doc.onSnapshot(async docSnapshot => {\n    let getDoc = await doc.get().then(async doc => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else if (data.length !== doc.data().receiptImg.length) {\n        upF();\n      }\n    });\n  }, err => {\n    console.log(`Encountered error: ${err}`);\n  });\n};\n\nexport const receiptListArr = async updateFunc => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef.get().then(doc => {\n    if (!doc.exists) {\n      console.log('No such document!');\n    } else {\n      receiptArr = doc.data().receiptImg;\n      sentinel(receiptArr, updateFunc);\n    }\n  }).catch(err => {\n    console.log('Error getting document', err);\n  });\n  return receiptArr;\n};\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const updateTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item)\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\nexport const deleteTracking = async (user, item) => {\n  const {\n    id\n  } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item)\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider); // console.log(auth.signInWithPopup(provider))\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/hugoii/Desktop/ironhack/projects/Fasces/src/Components/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","photoURL","createdAt","Date","trackStock","activeTrip","set","error","console","log","message","createNewTrip","user","tripName","id","tripRef","tripImages","tripReceipts","isActive","users","updateTripStatus","updateExpenses","userID","x","collection","userData","expense","data","expenses","total","update","endTripStatus","updateQuote","quote","userList","userArr","docs","map","i","length","balance","tripId","trip","tripList","endTrip","tripID","tripData","currentTrip","emails","push","err","updateImageArr","url","docID","imageArr","date","toDateString","FieldValue","arrayUnion","trips","retrieveImages","ref","reverse","findMyFriend","tripExist","el","sentinel","upF","observer","onSnapshot","docSnapshot","getDoc","then","receiptImg","receiptListArr","updateFunc","receiptArr","arrRef","catch","updateReceiptArr","imgURL","imgAmount","item","amount","saveReceipt","imgUrl","updateTracking","stockArr","deleteTracking","arrayRemove","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: 'AIzaSyBfylPGB3Vj9XqeRAe6K7n_48vjIv8Z0wU',\n  authDomain: 'paxanimi-73b93.firebaseapp.com',\n  databaseURL: 'https://paxanimi-73b93.firebaseio.com',\n  projectId: 'paxanimi-73b93',\n  storageBucket: 'paxanimi-73b93.appspot.com',\n  messagingSenderId: '852882682760',\n  appId: '1:852882682760:web:415f87c7be9f7eb4a6c03d',\n  measurementId: 'G-NB8J25CEJN',\n};\n\n\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email, photoURL } = userAuth;\n    const createdAt = new Date();\n    const trackStock = [];\n    const activeTrip = false;\n\n    try {\n      await userRef.set({\n        activeTrip,\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        trackStock,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n  return userRef;\n};\n\n\n//CREATE A NEW TRIP INSTANCE WITH ALL COMPOENTS EMPY\nexport const createNewTrip = async (user, tripName, id) => {\n  const tripRef = firestore.doc(`trips/${id}`);\n\n  const snapShot = await tripRef.get();\n\n  if (!snapShot.exists) {\n    const { email } = user;\n    const createdAt = new Date();\n    const tripImages = [];\n    const tripReceipts = []\n    const isActive = true;\n    const users = [email]\n\n    try {\n      await tripRef.set({\n        isActive,\n        createdAt,\n        tripName,\n        tripImages,\n        tripReceipts,\n        users\n      });\n      //SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\n      await updateTripStatus(user.id)\n    } catch (error) {\n      console.log('error creating trip', error.message);\n    }\n  }\n\n}\n\n\n\nexport const updateExpenses = async (userID, x) => {\n\n  let user = await firestore.collection('users').doc(userID);\n  let userData = await firestore.collection('users').doc(userID).get()\n  let expense = userData.data().expenses\n  let total = expense + x\n  try {\n    user.update({\n      expenses: total,\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n\n}\n\nexport const endTripStatus = async (userID) => {\n\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      activeTrip: false,\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n\n}\n\n\n// UPDATE QUOTE FOR PROFILE\nexport const updateQuote = async (userID, quote) => {\nconsole.log('running')\n  let user = await firestore.collection('users').doc(userID);\n\n  try {\n    user.update({\n      quote: quote,\n    });\n  } catch (error) {\n    console.log('Error adding quote', error);\n  }\n\n}\n\n\nexport const userList = async () => {\n  let userArr = [];\n\n  let users = await firestore.collection('users').get();\n  users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n\n  if (userArr.length > 0) {\n    console.log(userArr);\n    return userArr;\n  }\n};\n\nexport const balance = async (tripId) => {\n  let trip = await firestore.collection('trips').doc(tripId).get()\n  return trip.balance\n}\n\nexport const tripList = async () => {\n  let userArr = [];\n\n  let users = await firestore.collection('trips').get();\n  // users.docs.map((doc, i) => (userArr[i] = { id: doc.id, ...doc.data() }));\n  return users.docs\n  // if (userArr.length > 0) {\n  //   console.log(userArr);\n  //   return userArr;\n  // }\n};\n\nexport const endTrip = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  let tripRef = await firestore.collection('trips').doc(tripID).get();\n  let tripData = tripRef.data()\n  let users = tripData.users\n  try {\n    user.update({\n      activeTrip: false,\n      currentTrip: '',\n    });\n  } catch (error) {\n    console.log('Error ending trip', error);\n  }\n  try {\n    let emails = []\n      users.map( async user => {\n      emails.push(user.email)\n    })\n    return emails\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport const updateImageArr = async (url, tripID) => {\n  const docID = tripID;\n  let imageArr = await firestore.collection('trips').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  // let item = {\n  //   url: url,\n  //   id: id,\n  //   createdAt: createdAt,\n  //   amount: imgAmount,\n  // };\n  try {\n    imageArr.update({\n      tripImages: firebase.firestore.FieldValue.arrayUnion(url),\n    });\n  } catch (error) {\n    console.log('Error adding image', error);\n  }\n}\n\n//SET USER AS ACTIVE IN A TRIP SO HE CANT CREATE A NEW ONE AND BE ABLE TO HAVE FRIENDS JOIN\nexport const  updateTripStatus = async (userID, tripID) => {\n  let user = await firestore.collection('users').doc(userID);\n  try {\n    user.update({\n      activeTrip: true,\n      trips: firebase.firestore.FieldValue.arrayUnion(tripID),\n      currentTrip: tripID,\n    });\n  } catch (error) {\n    console.log('Error creating trip', error);\n  }\n};\n\nexport const retrieveImages = async (user) => {\n  const { currentTrip } = user;\n  let tripImages = [];\n  try {\n    let ref = await firestore.collection('trips').doc(currentTrip).get();\n    let data = await ref.data();\n    tripImages = data.tripImages;\n  } catch (err) {\n    console.log(err);\n  }\n  return tripImages.reverse();\n};\n\nexport const findMyFriend = async (email) => {\n  let users = await userList()\n  let tripExist = false\n  users.map(el => {\n    if(el.email === email && el.activeTrip === true){\n      return tripExist = el.currentTrip\n    }\n  })\n  return tripExist\n};\n\nconst sentinel = async (data, upF) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n\n  let doc = await firestore.collection('images').doc(docID);\n\n  let observer = await doc.onSnapshot(\n    async (docSnapshot) => {\n      let getDoc = await doc.get().then(async (doc) => {\n        if (!doc.exists) {\n          console.log('No such document!');\n        } else if (data.length !== doc.data().receiptImg.length) {\n          upF();\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n};\n\nexport const receiptListArr = async (updateFunc) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  var receiptArr = [];\n  let arrRef = await firestore.collection('images').doc(docID);\n  let getDoc = await arrRef\n    .get()\n    .then((doc) => {\n      if (!doc.exists) {\n        console.log('No such document!');\n      } else {\n        receiptArr = doc.data().receiptImg;\n\n        sentinel(receiptArr, updateFunc);\n      }\n    })\n    .catch((err) => {\n      console.log('Error getting document', err);\n    });\n\n  return receiptArr;\n};\n\n\n\nexport const updateReceiptArr = async (id, imgURL, imgAmount) => {\n  const docID = '4mcO13n8lUBeSezFmLD1';\n  let receiptArr = await firestore.collection('images').doc(docID);\n  const date = new Date();\n  const createdAt = date.toDateString();\n  let item = {\n    url: imgURL,\n    id: id,\n    createdAt: createdAt,\n    amount: imgAmount,\n  };\n\n  try {\n    receiptArr.update({\n      receiptImg: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const saveReceipt = async (id, imgURL, imgAmount) => {\n  const userRef = firestore.doc(`images/${id}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const imgUrl = imgURL;\n    const amount = imgAmount;\n    const date = new Date();\n    const createdAt = date.toDateString();\n\n    try {\n      await userRef.set({\n        imgUrl,\n        createdAt,\n        amount,\n      });\n    } catch (error) {\n      console.log('error saving receipt', error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const updateTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayUnion(item),\n    });\n  } catch (error) {\n    console.log('Error adding stock', error);\n  }\n};\n\nexport const deleteTracking = async (user, item) => {\n  const { id } = user;\n  let stockArr = await firestore.collection('users').doc(id);\n\n  try {\n    stockArr.update({\n      trackStock: firebase.firestore.FieldValue.arrayRemove(item),\n    });\n  } catch (error) {\n    console.log('Error deleting stock', error);\n  }\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n  // console.log(auth.signInWithPopup(provider))\n};\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}