{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/groupImage/GroupImage.jsx\";\nimport React, { Component } from 'react';\nimport GroupImageFolder from './GroupImageFolder';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\nimport ToastMessage from '../Toast/toastMessage';\nimport actions from '../../RouteContainer/axiosCalls';\nimport { retrieveImages } from '../firebase/firebase.utils';\nimport Progress from '../progress/Progress';\nimport './groupImage.css';\nexport default class GroupImage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageUrl: undefined,\n      imageArr: '',\n      saved: false\n    };\n\n    this.updateArr = async () => {\n      await retrieveImages(this.props.currentUser); // this.setState({\n      //   imageArr: arr,\n      // });\n    };\n\n    this.handleFileUpload = async e => {\n      console.log('The file to be uploaded is: ', e.target.files[0]);\n      const uploadData = new FormData(); // imageUrl => this name has to be the same as in the model since we pass\n      // req.body to .create() method when creating a new thing in '/api/things/create' POST route\n\n      uploadData.append('imageUrl', e.target.files[0]);\n      await actions.uploadToCD(uploadData).then(response => {\n        // console.log('response is: ', response);\n        // after the console.log we can see that response carries 'secure_url' which we can use to update the state\n        this.setState({\n          imageUrl: response.data.secure_url,\n          saved: false\n        });\n      }).catch(err => {\n        console.log('Error while uploading the file: ', err);\n      });\n    };\n\n    this.handleSubmit = async () => {\n      await actions.uploadToDB(this.state);\n      this.setState({\n        imageUrl: undefined,\n        saved: true\n      });\n      this.updateArr();\n    };\n\n    this.componentView = (onUp, onSaved, imageArr) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"folderContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GroupImageFolder, {\n        imageArr: imageArr,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        alignItems: \"center\",\n        className: \"folderBtn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"small\" // className={classes.button}\n        ,\n        startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 22\n          }\n        }),\n        onClick: () => this.handleSubmit(this.state.imageUrl),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(\"input\", {\n        accept: \"image/*\",\n        className: \"uploadFile groupBtn\",\n        id: \"contained-button-file\",\n        multiple: true,\n        type: \"file\",\n        onChange: e => this.handleFileUpload(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"contained-button-file\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        size: \"small\",\n        component: \"span\",\n        className: \"groupBtn\",\n        startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 24\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, \"Upload\"))), onUp ? /*#__PURE__*/React.createElement(ToastMessage, {\n        message: 'Success, ready to save!',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }) : '', onSaved ? /*#__PURE__*/React.createElement(ToastMessage, {\n        message: 'Image saved!',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 18\n        }\n      }) : '');\n    };\n  }\n\n  componentDidMount() {\n    this.updateArr();\n  } // this method handles just the file upload\n\n\n  render() {\n    let onUp = false;\n    let onSaved = this.state.saved;\n    this.state.imageUrl === undefined ? onUp = false : onUp = true;\n    onSaved ? onSaved = true : onSaved = false;\n    const {\n      imageArr\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, imageArr ? this.componentView(onUp, onSaved, imageArr) : /*#__PURE__*/React.createElement(Progress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 70\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/alexander/Desktop/Ironhack/Paxanimi/src/Components/groupImage/GroupImage.jsx"],"names":["React","Component","GroupImageFolder","Button","CloudUploadIcon","SaveIcon","Grid","ToastMessage","actions","retrieveImages","Progress","GroupImage","state","imageUrl","undefined","imageArr","saved","updateArr","props","currentUser","handleFileUpload","e","console","log","target","files","uploadData","FormData","append","uploadToCD","then","response","setState","data","secure_url","catch","err","handleSubmit","uploadToDB","componentView","onUp","onSaved","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GroupImageFolder from './GroupImageFolder';\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\nimport ToastMessage from '../Toast/toastMessage';\nimport actions from '../../RouteContainer/axiosCalls';\nimport { retrieveImages } from '../firebase/firebase.utils';\nimport Progress from '../progress/Progress';\nimport './groupImage.css';\n\nexport default class GroupImage extends Component {\n  state = {\n    imageUrl: undefined,\n    imageArr: '',\n    saved: false,\n  };\n\n  updateArr = async () => {\n     await retrieveImages(this.props.currentUser);\n    \n\n    // this.setState({\n    //   imageArr: arr,\n    // });\n  };\n\n  componentDidMount() {\n    this.updateArr();\n  }\n\n  // this method handles just the file upload\n  handleFileUpload = async (e) => {\n    console.log('The file to be uploaded is: ', e.target.files[0]);\n\n    const uploadData = new FormData();\n    // imageUrl => this name has to be the same as in the model since we pass\n    // req.body to .create() method when creating a new thing in '/api/things/create' POST route\n    uploadData.append('imageUrl', e.target.files[0]);\n\n    await actions\n      .uploadToCD(uploadData)\n      .then((response) => {\n        // console.log('response is: ', response);\n        // after the console.log we can see that response carries 'secure_url' which we can use to update the state\n        this.setState({ imageUrl: response.data.secure_url, saved: false });\n      })\n      .catch((err) => {\n        console.log('Error while uploading the file: ', err);\n      });\n  };\n\n  // THIS METHOD ADDS THE IMAGE TO THE LIST\n  handleSubmit = async () => {\n    await actions.uploadToDB(this.state);\n\n    this.setState({\n      imageUrl: undefined,\n      saved: true,\n    });\n\n    this.updateArr();\n  };\n\n  //VIEW\n  componentView = (onUp, onSaved, imageArr) => {\n    return (<div>\n      <div className=\"folderContainer\">\n        <GroupImageFolder imageArr={imageArr} />\n      </div>\n\n      <Grid\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        className=\"folderBtn\"\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          // className={classes.button}\n          startIcon={<SaveIcon />}\n          onClick={() => this.handleSubmit(this.state.imageUrl)}\n        >\n          Save\n        </Button>\n        <input\n          accept=\"image/*\"\n          className=\"uploadFile groupBtn\"\n          id=\"contained-button-file\"\n          multiple\n          type=\"file\"\n          onChange={(e) => this.handleFileUpload(e)}\n        />\n        <label htmlFor=\"contained-button-file\">\n          <Button\n            variant=\"contained\"\n            color=\"default\"\n            size=\"small\"\n            component=\"span\"\n            className=\"groupBtn\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Upload\n          </Button>\n        </label>\n      </Grid>\n      {onUp ? <ToastMessage message={'Success, ready to save!'} /> : ''}\n      {onSaved ? <ToastMessage message={'Image saved!'} /> : ''}\n    </div>);\n  }\n\n  render() {\n    let onUp = false;\n    let onSaved = this.state.saved;\n    this.state.imageUrl === undefined ? (onUp = false) : (onUp = true);\n    onSaved ? (onSaved = true) : (onSaved = false);\n\n    const { imageArr } = this.state;\n    return (\n      <div>{imageArr ? this.componentView(onUp, onSaved, imageArr) : <Progress />}</div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}